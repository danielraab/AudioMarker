// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean   @default(false)
    isDisabled    Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    audios        Audio[]
    playlists     Playlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Audio {
    id               String    @id @default(cuid())
    name             String
    originalFileName String
    filePath         String
    createdBy        User      @relation(fields: [createdById], references: [id])
    createdById      String
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?
    isPublic         Boolean   @default(true)
    markers          Marker[]
    playlistAudios   PlaylistAudio[]
}

model Marker {
    id          String    @id @default(cuid())
    label       String
    timestamp   Float
    color       String    @default("#3b82f6") // default blue color
    audio       Audio     @relation(fields: [audioId], references: [id], onDelete: Cascade)
    audioId     String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([audioId, timestamp])
}

model Playlist {
    id            String          @id @default(cuid())
    name          String
    isPublic      Boolean         @default(false)
    createdBy     User            @relation(fields: [createdById], references: [id])
    createdById   String
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deletedAt     DateTime?
    audios        PlaylistAudio[]
}

model PlaylistAudio {
    id          String   @id @default(cuid())
    playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    playlistId  String
    audio       Audio    @relation(fields: [audioId], references: [id], onDelete: Cascade)
    audioId     String
    order       Int      @default(0)
    addedAt     DateTime @default(now())

    @@unique([playlistId, audioId])
}
